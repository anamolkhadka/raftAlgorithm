Raft Consensus Algorithm.

Requirement Analysis:

- Implement Raft Consensus algorithm where Raft achieves fault-tolerance consensus, handle leader election, maintain log consistency, and manage distributed state transitions.
- Nodes will communicate with each other using gRPC and each node must be containerized using Docker.
- Use two languages to implement Raft.
- State of each node: Follower -> Candidate -> Leader

Demo
- Run 4 python raft servers.
- Run 1 java raft server.
- Run python client.
- Verify the leader election.
- Send request to any node in the cluster and the client get's the response.
- Terminator the leader process with Ctrl + c.
- Verify the new leader elected from the remaining process in the logical group.
- 