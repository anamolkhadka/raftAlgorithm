syntax = "proto3";

package raft;

service RaftService {
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc ClientRequest(ClientRequestMessage) returns (ClientResponseMessage); // New RPC
    rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
    rpc GetLog(GetLogRequest) returns (GetLogResponse);
}

message RequestVoteRequest {
    int32 term = 1;
    int32 candidateId = 2;
    int32 lastLogIndex = 3;
    int32 lastLogTerm = 4;
}

message RequestVoteResponse {
    int32 term = 1;
    bool voteGranted = 2;
}

message AppendEntriesRequest {
    int32 term = 1;
    int32 leaderId = 2;
    repeated LogEntry entries = 3;
    int32 prevLogIndex = 4;
    int32 prevLogTerm = 5;
    int32 leaderCommit = 6;
}

message AppendEntriesResponse {
    int32 term = 1;
    bool success = 2;
}

message LogEntry {
    int32 index = 1;
    int32 term = 2;
    string command = 3;
}

// New message types for client communication
message ClientRequestMessage {
    string command = 1; // The operation requested by the client
}

message ClientResponseMessage {
    bool success = 1;    // Whether the request was successfully processed
    string message = 2;  // Additional information or result
}

message GetStatusRequest {}

message GetStatusResponse {
    string state = 1;         // State of the server (Leader, Follower, Candidate)
    int32 current_term = 2;   // Current term of the server
    int32 voted_for = 3;      // The ID of the server this node voted for
    int32 leader_id = 4;      // The ID of the current leader
}

message GetLogRequest {
    // Optional fields if needed
}

message GetLogResponse {
    repeated LogEntry entries = 1; // List of log entries
}